/*
Deployment script for WideWorldImportersDW

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
:setvar DatabaseName "WideWorldImportersDW"
:setvar DefaultFilePrefix "WideWorldImportersDW"
:setvar DefaultDataPath "C:\Program Files\Microsoft SQL Server\MSSQL16.SQLEXPRESS\MSSQL\DATA\"
:setvar DefaultLogPath "C:\Program Files\Microsoft SQL Server\MSSQL16.SQLEXPRESS\MSSQL\DATA\"

GO
:on error exit
GO
/*
Detect SQLCMD mode and disable script execution if SQLCMD mode is not supported.
To re-enable the script after enabling SQLCMD mode, execute the following:
SET NOEXEC OFF; 
*/
:setvar __IsSqlCmdEnabled "True"
GO
IF N'$(__IsSqlCmdEnabled)' NOT LIKE N'True'
    BEGIN
        PRINT N'SQLCMD mode must be enabled to successfully execute this script.';
        SET NOEXEC ON;
    END


GO
USE [$(DatabaseName)];


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET ANSI_NULLS ON,
                ANSI_PADDING ON,
                ANSI_WARNINGS ON,
                ARITHABORT ON,
                CONCAT_NULL_YIELDS_NULL ON,
                QUOTED_IDENTIFIER ON,
                ANSI_NULL_DEFAULT ON,
                CURSOR_DEFAULT LOCAL,
                RECOVERY FULL 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET PAGE_VERIFY NONE 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET MEMORY_OPTIMIZED_ELEVATE_TO_SNAPSHOT = OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET QUERY_STORE (QUERY_CAPTURE_MODE = ALL, DATA_FLUSH_INTERVAL_SECONDS = 900, INTERVAL_LENGTH_MINUTES = 60, MAX_PLANS_PER_QUERY = 200, CLEANUP_POLICY = (STALE_QUERY_THRESHOLD_DAYS = 367), MAX_STORAGE_SIZE_MB = 100) 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET QUERY_STORE = OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET TEMPORAL_HISTORY_RETENTION ON 
            WITH ROLLBACK IMMEDIATE;
    END


GO
PRINT N'Dropping Foreign Key [Fact].[FK_Fact_Movement_Date_Key_Dimension_Date]...';


GO
ALTER TABLE [Fact].[Movement] DROP CONSTRAINT [FK_Fact_Movement_Date_Key_Dimension_Date];


GO
PRINT N'Dropping Foreign Key [Fact].[FK_Fact_Movement_Stock_Item_Key_Dimension_Stock Item]...';


GO
ALTER TABLE [Fact].[Movement] DROP CONSTRAINT [FK_Fact_Movement_Stock_Item_Key_Dimension_Stock Item];


GO
PRINT N'Dropping Foreign Key [Fact].[FK_Fact_Movement_Customer_Key_Dimension_Customer]...';


GO
ALTER TABLE [Fact].[Movement] DROP CONSTRAINT [FK_Fact_Movement_Customer_Key_Dimension_Customer];


GO
PRINT N'Dropping Foreign Key [Fact].[FK_Fact_Movement_Supplier_Key_Dimension_Supplier]...';


GO
ALTER TABLE [Fact].[Movement] DROP CONSTRAINT [FK_Fact_Movement_Supplier_Key_Dimension_Supplier];


GO
PRINT N'Dropping Foreign Key [Fact].[FK_Fact_Movement_Transaction_Type_Key_Dimension_Transaction Type]...';


GO
ALTER TABLE [Fact].[Movement] DROP CONSTRAINT [FK_Fact_Movement_Transaction_Type_Key_Dimension_Transaction Type];


GO
PRINT N'Dropping Foreign Key [Fact].[FK_Fact_Order_City_Key_Dimension_City]...';


GO
ALTER TABLE [Fact].[Order] DROP CONSTRAINT [FK_Fact_Order_City_Key_Dimension_City];


GO
PRINT N'Dropping Foreign Key [Fact].[FK_Fact_Order_Customer_Key_Dimension_Customer]...';


GO
ALTER TABLE [Fact].[Order] DROP CONSTRAINT [FK_Fact_Order_Customer_Key_Dimension_Customer];


GO
PRINT N'Dropping Foreign Key [Fact].[FK_Fact_Order_Stock_Item_Key_Dimension_Stock Item]...';


GO
ALTER TABLE [Fact].[Order] DROP CONSTRAINT [FK_Fact_Order_Stock_Item_Key_Dimension_Stock Item];


GO
PRINT N'Dropping Foreign Key [Fact].[FK_Fact_Order_Order_Date_Key_Dimension_Date]...';


GO
ALTER TABLE [Fact].[Order] DROP CONSTRAINT [FK_Fact_Order_Order_Date_Key_Dimension_Date];


GO
PRINT N'Dropping Foreign Key [Fact].[FK_Fact_Order_Picked_Date_Key_Dimension_Date]...';


GO
ALTER TABLE [Fact].[Order] DROP CONSTRAINT [FK_Fact_Order_Picked_Date_Key_Dimension_Date];


GO
PRINT N'Dropping Foreign Key [Fact].[FK_Fact_Order_Salesperson_Key_Dimension_Employee]...';


GO
ALTER TABLE [Fact].[Order] DROP CONSTRAINT [FK_Fact_Order_Salesperson_Key_Dimension_Employee];


GO
PRINT N'Dropping Foreign Key [Fact].[FK_Fact_Order_Picker_Key_Dimension_Employee]...';


GO
ALTER TABLE [Fact].[Order] DROP CONSTRAINT [FK_Fact_Order_Picker_Key_Dimension_Employee];


GO
PRINT N'Dropping Foreign Key [Fact].[FK_Fact_Purchase_Date_Key_Dimension_Date]...';


GO
ALTER TABLE [Fact].[Purchase] DROP CONSTRAINT [FK_Fact_Purchase_Date_Key_Dimension_Date];


GO
PRINT N'Dropping Foreign Key [Fact].[FK_Fact_Purchase_Supplier_Key_Dimension_Supplier]...';


GO
ALTER TABLE [Fact].[Purchase] DROP CONSTRAINT [FK_Fact_Purchase_Supplier_Key_Dimension_Supplier];


GO
PRINT N'Dropping Foreign Key [Fact].[FK_Fact_Purchase_Stock_Item_Key_Dimension_Stock Item]...';


GO
ALTER TABLE [Fact].[Purchase] DROP CONSTRAINT [FK_Fact_Purchase_Stock_Item_Key_Dimension_Stock Item];


GO
PRINT N'Dropping Foreign Key [Fact].[FK_Fact_Sale_City_Key_Dimension_City]...';


GO
ALTER TABLE [Fact].[Sale] DROP CONSTRAINT [FK_Fact_Sale_City_Key_Dimension_City];


GO
PRINT N'Dropping Foreign Key [Fact].[FK_Fact_Sale_Customer_Key_Dimension_Customer]...';


GO
ALTER TABLE [Fact].[Sale] DROP CONSTRAINT [FK_Fact_Sale_Customer_Key_Dimension_Customer];


GO
PRINT N'Dropping Foreign Key [Fact].[FK_Fact_Sale_Bill_To_Customer_Key_Dimension_Customer]...';


GO
ALTER TABLE [Fact].[Sale] DROP CONSTRAINT [FK_Fact_Sale_Bill_To_Customer_Key_Dimension_Customer];


GO
PRINT N'Dropping Foreign Key [Fact].[FK_Fact_Sale_Stock_Item_Key_Dimension_Stock Item]...';


GO
ALTER TABLE [Fact].[Sale] DROP CONSTRAINT [FK_Fact_Sale_Stock_Item_Key_Dimension_Stock Item];


GO
PRINT N'Dropping Foreign Key [Fact].[FK_Fact_Sale_Invoice_Date_Key_Dimension_Date]...';


GO
ALTER TABLE [Fact].[Sale] DROP CONSTRAINT [FK_Fact_Sale_Invoice_Date_Key_Dimension_Date];


GO
PRINT N'Dropping Foreign Key [Fact].[FK_Fact_Sale_Delivery_Date_Key_Dimension_Date]...';


GO
ALTER TABLE [Fact].[Sale] DROP CONSTRAINT [FK_Fact_Sale_Delivery_Date_Key_Dimension_Date];


GO
PRINT N'Dropping Foreign Key [Fact].[FK_Fact_Sale_Salesperson_Key_Dimension_Employee]...';


GO
ALTER TABLE [Fact].[Sale] DROP CONSTRAINT [FK_Fact_Sale_Salesperson_Key_Dimension_Employee];


GO
PRINT N'Dropping Foreign Key [Fact].[FK_Fact_Transaction_Date_Key_Dimension_Date]...';


GO
ALTER TABLE [Fact].[Transaction] DROP CONSTRAINT [FK_Fact_Transaction_Date_Key_Dimension_Date];


GO
PRINT N'Dropping Foreign Key [Fact].[FK_Fact_Transaction_Customer_Key_Dimension_Customer]...';


GO
ALTER TABLE [Fact].[Transaction] DROP CONSTRAINT [FK_Fact_Transaction_Customer_Key_Dimension_Customer];


GO
PRINT N'Dropping Foreign Key [Fact].[FK_Fact_Transaction_Bill_To_Customer_Key_Dimension_Customer]...';


GO
ALTER TABLE [Fact].[Transaction] DROP CONSTRAINT [FK_Fact_Transaction_Bill_To_Customer_Key_Dimension_Customer];


GO
PRINT N'Dropping Foreign Key [Fact].[FK_Fact_Transaction_Supplier_Key_Dimension_Supplier]...';


GO
ALTER TABLE [Fact].[Transaction] DROP CONSTRAINT [FK_Fact_Transaction_Supplier_Key_Dimension_Supplier];


GO
PRINT N'Dropping Foreign Key [Fact].[FK_Fact_Transaction_Transaction_Type_Key_Dimension_Transaction Type]...';


GO
ALTER TABLE [Fact].[Transaction] DROP CONSTRAINT [FK_Fact_Transaction_Transaction_Type_Key_Dimension_Transaction Type];


GO
PRINT N'Dropping Foreign Key [Fact].[FK_Fact_Transaction_Payment_Method_Key_Dimension_Payment Method]...';


GO
ALTER TABLE [Fact].[Transaction] DROP CONSTRAINT [FK_Fact_Transaction_Payment_Method_Key_Dimension_Payment Method];


GO
PRINT N'Dropping Column Store Index [Fact].[Movement].[CCX_Fact_Movement]...';


GO
DROP INDEX [CCX_Fact_Movement]
    ON [Fact].[Movement];


GO
PRINT N'Unbinding columns from changing objects on table [Fact].[Movement]...';


GO
BEGIN TRANSACTION;

SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;

SET XACT_ABORT ON;

CREATE TABLE [Fact].[tmp_ms_xx_Movement] (
    [Movement Key]                  BIGINT IDENTITY (1, 1) NOT NULL,
    [Date Key]                      DATE   NOT NULL,
    [Stock Item Key]                INT    NOT NULL,
    [Customer Key]                  INT    NULL,
    [Supplier Key]                  INT    NULL,
    [Transaction Type Key]          INT    NOT NULL,
    [WWI Stock Item Transaction ID] INT    NOT NULL,
    [WWI Invoice ID]                INT    NULL,
    [WWI Purchase Order ID]         INT    NULL,
    [Quantity]                      INT    NOT NULL,
    [Lineage Key]                   INT    NOT NULL
);

IF EXISTS (SELECT TOP 1 1 
           FROM   [Fact].[Movement])
    BEGIN
        SET IDENTITY_INSERT [Fact].[tmp_ms_xx_Movement] ON;
        INSERT INTO [Fact].[tmp_ms_xx_Movement] ([Movement Key], [Date Key], [Stock Item Key], [Customer Key], [Supplier Key], [Transaction Type Key], [WWI Stock Item Transaction ID], [WWI Invoice ID], [WWI Purchase Order ID], [Quantity], [Lineage Key])
        SELECT [Movement Key],
               [Date Key],
               [Stock Item Key],
               [Customer Key],
               [Supplier Key],
               [Transaction Type Key],
               [WWI Stock Item Transaction ID],
               [WWI Invoice ID],
               [WWI Purchase Order ID],
               [Quantity],
               [Lineage Key]
        FROM   [Fact].[Movement];
        SET IDENTITY_INSERT [Fact].[tmp_ms_xx_Movement] OFF;
    END

DROP TABLE [Fact].[Movement];

EXECUTE sp_rename N'[Fact].[tmp_ms_xx_Movement]', N'Movement';

COMMIT TRANSACTION;

SET TRANSACTION ISOLATION LEVEL READ COMMITTED;


GO
PRINT N'Dropping Column Store Index [Fact].[Order].[CCX_Fact_Order]...';


GO
DROP INDEX [CCX_Fact_Order]
    ON [Fact].[Order];


GO
PRINT N'Unbinding columns from changing objects on table [Fact].[Order]...';


GO
BEGIN TRANSACTION;

SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;

SET XACT_ABORT ON;

CREATE TABLE [Fact].[tmp_ms_xx_Order] (
    [Order Key]           BIGINT          IDENTITY (1, 1) NOT NULL,
    [City Key]            INT             NOT NULL,
    [Customer Key]        INT             NOT NULL,
    [Stock Item Key]      INT             NOT NULL,
    [Order Date Key]      DATE            NOT NULL,
    [Picked Date Key]     DATE            NULL,
    [Salesperson Key]     INT             NOT NULL,
    [Picker Key]          INT             NULL,
    [WWI Order ID]        INT             NOT NULL,
    [WWI Backorder ID]    INT             NULL,
    [Description]         NVARCHAR (100)  NOT NULL,
    [Package]             NVARCHAR (50)   NOT NULL,
    [Quantity]            INT             NOT NULL,
    [Unit Price]          DECIMAL (18, 2) NOT NULL,
    [Tax Rate]            DECIMAL (18, 3) NOT NULL,
    [Total Excluding Tax] DECIMAL (18, 2) NOT NULL,
    [Tax Amount]          DECIMAL (18, 2) NOT NULL,
    [Total Including Tax] DECIMAL (18, 2) NOT NULL,
    [Lineage Key]         INT             NOT NULL
);

IF EXISTS (SELECT TOP 1 1 
           FROM   [Fact].[Order])
    BEGIN
        SET IDENTITY_INSERT [Fact].[tmp_ms_xx_Order] ON;
        INSERT INTO [Fact].[tmp_ms_xx_Order] ([Order Key], [City Key], [Customer Key], [Stock Item Key], [Order Date Key], [Picked Date Key], [Salesperson Key], [Picker Key], [WWI Order ID], [WWI Backorder ID], [Description], [Package], [Quantity], [Unit Price], [Tax Rate], [Total Excluding Tax], [Tax Amount], [Total Including Tax], [Lineage Key])
        SELECT [Order Key],
               [City Key],
               [Customer Key],
               [Stock Item Key],
               [Order Date Key],
               [Picked Date Key],
               [Salesperson Key],
               [Picker Key],
               [WWI Order ID],
               [WWI Backorder ID],
               [Description],
               [Package],
               [Quantity],
               [Unit Price],
               [Tax Rate],
               [Total Excluding Tax],
               [Tax Amount],
               [Total Including Tax],
               [Lineage Key]
        FROM   [Fact].[Order];
        SET IDENTITY_INSERT [Fact].[tmp_ms_xx_Order] OFF;
    END

DROP TABLE [Fact].[Order];

EXECUTE sp_rename N'[Fact].[tmp_ms_xx_Order]', N'Order';

COMMIT TRANSACTION;

SET TRANSACTION ISOLATION LEVEL READ COMMITTED;


GO
PRINT N'Dropping Column Store Index [Fact].[Purchase].[CCX_Fact_Purchase]...';


GO
DROP INDEX [CCX_Fact_Purchase]
    ON [Fact].[Purchase];


GO
PRINT N'Unbinding columns from changing objects on table [Fact].[Purchase]...';


GO
BEGIN TRANSACTION;

SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;

SET XACT_ABORT ON;

CREATE TABLE [Fact].[tmp_ms_xx_Purchase] (
    [Purchase Key]          BIGINT        IDENTITY (1, 1) NOT NULL,
    [Date Key]              DATE          NOT NULL,
    [Supplier Key]          INT           NOT NULL,
    [Stock Item Key]        INT           NOT NULL,
    [WWI Purchase Order ID] INT           NULL,
    [Ordered Outers]        INT           NOT NULL,
    [Ordered Quantity]      INT           NOT NULL,
    [Received Outers]       INT           NOT NULL,
    [Package]               NVARCHAR (50) NOT NULL,
    [Is Order Finalized]    BIT           NOT NULL,
    [Lineage Key]           INT           NOT NULL
);

IF EXISTS (SELECT TOP 1 1 
           FROM   [Fact].[Purchase])
    BEGIN
        SET IDENTITY_INSERT [Fact].[tmp_ms_xx_Purchase] ON;
        INSERT INTO [Fact].[tmp_ms_xx_Purchase] ([Purchase Key], [Date Key], [Supplier Key], [Stock Item Key], [WWI Purchase Order ID], [Ordered Outers], [Ordered Quantity], [Received Outers], [Package], [Is Order Finalized], [Lineage Key])
        SELECT [Purchase Key],
               [Date Key],
               [Supplier Key],
               [Stock Item Key],
               [WWI Purchase Order ID],
               [Ordered Outers],
               [Ordered Quantity],
               [Received Outers],
               [Package],
               [Is Order Finalized],
               [Lineage Key]
        FROM   [Fact].[Purchase];
        SET IDENTITY_INSERT [Fact].[tmp_ms_xx_Purchase] OFF;
    END

DROP TABLE [Fact].[Purchase];

EXECUTE sp_rename N'[Fact].[tmp_ms_xx_Purchase]', N'Purchase';

COMMIT TRANSACTION;

SET TRANSACTION ISOLATION LEVEL READ COMMITTED;


GO
PRINT N'Dropping Column Store Index [Fact].[Sale].[CCX_Fact_Sale]...';


GO
DROP INDEX [CCX_Fact_Sale]
    ON [Fact].[Sale];


GO
PRINT N'Unbinding columns from changing objects on table [Fact].[Sale]...';


GO
BEGIN TRANSACTION;

SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;

SET XACT_ABORT ON;

CREATE TABLE [Fact].[tmp_ms_xx_Sale] (
    [Sale Key]             BIGINT          IDENTITY (1, 1) NOT NULL,
    [City Key]             INT             NOT NULL,
    [Customer Key]         INT             NOT NULL,
    [Bill To Customer Key] INT             NOT NULL,
    [Stock Item Key]       INT             NOT NULL,
    [Invoice Date Key]     DATE            NOT NULL,
    [Delivery Date Key]    DATE            NULL,
    [Salesperson Key]      INT             NOT NULL,
    [WWI Invoice ID]       INT             NOT NULL,
    [Description]          NVARCHAR (100)  NOT NULL,
    [Package]              NVARCHAR (50)   NOT NULL,
    [Quantity]             INT             NOT NULL,
    [Unit Price]           DECIMAL (18, 2) NOT NULL,
    [Tax Rate]             DECIMAL (18, 3) NOT NULL,
    [Total Excluding Tax]  DECIMAL (18, 2) NOT NULL,
    [Tax Amount]           DECIMAL (18, 2) NOT NULL,
    [Profit]               DECIMAL (18, 2) NOT NULL,
    [Total Including Tax]  DECIMAL (18, 2) NOT NULL,
    [Total Dry Items]      INT             NOT NULL,
    [Total Chiller Items]  INT             NOT NULL,
    [Lineage Key]          INT             NOT NULL
);

IF EXISTS (SELECT TOP 1 1 
           FROM   [Fact].[Sale])
    BEGIN
        SET IDENTITY_INSERT [Fact].[tmp_ms_xx_Sale] ON;
        INSERT INTO [Fact].[tmp_ms_xx_Sale] ([Sale Key], [City Key], [Customer Key], [Bill To Customer Key], [Stock Item Key], [Invoice Date Key], [Delivery Date Key], [Salesperson Key], [WWI Invoice ID], [Description], [Package], [Quantity], [Unit Price], [Tax Rate], [Total Excluding Tax], [Tax Amount], [Profit], [Total Including Tax], [Total Dry Items], [Total Chiller Items], [Lineage Key])
        SELECT [Sale Key],
               [City Key],
               [Customer Key],
               [Bill To Customer Key],
               [Stock Item Key],
               [Invoice Date Key],
               [Delivery Date Key],
               [Salesperson Key],
               [WWI Invoice ID],
               [Description],
               [Package],
               [Quantity],
               [Unit Price],
               [Tax Rate],
               [Total Excluding Tax],
               [Tax Amount],
               [Profit],
               [Total Including Tax],
               [Total Dry Items],
               [Total Chiller Items],
               [Lineage Key]
        FROM   [Fact].[Sale];
        SET IDENTITY_INSERT [Fact].[tmp_ms_xx_Sale] OFF;
    END

DROP TABLE [Fact].[Sale];

EXECUTE sp_rename N'[Fact].[tmp_ms_xx_Sale]', N'Sale';

COMMIT TRANSACTION;

SET TRANSACTION ISOLATION LEVEL READ COMMITTED;


GO
PRINT N'Dropping Column Store Index [Fact].[Transaction].[CCX_Fact_Transaction]...';


GO
DROP INDEX [CCX_Fact_Transaction]
    ON [Fact].[Transaction];


GO
PRINT N'Unbinding columns from changing objects on table [Fact].[Transaction]...';


GO
BEGIN TRANSACTION;

SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;

SET XACT_ABORT ON;

CREATE TABLE [Fact].[tmp_ms_xx_Transaction] (
    [Transaction Key]             BIGINT          IDENTITY (1, 1) NOT NULL,
    [Date Key]                    DATE            NOT NULL,
    [Customer Key]                INT             NULL,
    [Bill To Customer Key]        INT             NULL,
    [Supplier Key]                INT             NULL,
    [Transaction Type Key]        INT             NOT NULL,
    [Payment Method Key]          INT             NULL,
    [WWI Customer Transaction ID] INT             NULL,
    [WWI Supplier Transaction ID] INT             NULL,
    [WWI Invoice ID]              INT             NULL,
    [WWI Purchase Order ID]       INT             NULL,
    [Supplier Invoice Number]     NVARCHAR (20)   NULL,
    [Total Excluding Tax]         DECIMAL (18, 2) NOT NULL,
    [Tax Amount]                  DECIMAL (18, 2) NOT NULL,
    [Total Including Tax]         DECIMAL (18, 2) NOT NULL,
    [Outstanding Balance]         DECIMAL (18, 2) NOT NULL,
    [Is Finalized]                BIT             NOT NULL,
    [Lineage Key]                 INT             NOT NULL
);

IF EXISTS (SELECT TOP 1 1 
           FROM   [Fact].[Transaction])
    BEGIN
        SET IDENTITY_INSERT [Fact].[tmp_ms_xx_Transaction] ON;
        INSERT INTO [Fact].[tmp_ms_xx_Transaction] ([Transaction Key], [Date Key], [Customer Key], [Bill To Customer Key], [Supplier Key], [Transaction Type Key], [Payment Method Key], [WWI Customer Transaction ID], [WWI Supplier Transaction ID], [WWI Invoice ID], [WWI Purchase Order ID], [Supplier Invoice Number], [Total Excluding Tax], [Tax Amount], [Total Including Tax], [Outstanding Balance], [Is Finalized], [Lineage Key])
        SELECT [Transaction Key],
               [Date Key],
               [Customer Key],
               [Bill To Customer Key],
               [Supplier Key],
               [Transaction Type Key],
               [Payment Method Key],
               [WWI Customer Transaction ID],
               [WWI Supplier Transaction ID],
               [WWI Invoice ID],
               [WWI Purchase Order ID],
               [Supplier Invoice Number],
               [Total Excluding Tax],
               [Tax Amount],
               [Total Including Tax],
               [Outstanding Balance],
               [Is Finalized],
               [Lineage Key]
        FROM   [Fact].[Transaction];
        SET IDENTITY_INSERT [Fact].[tmp_ms_xx_Transaction] OFF;
    END

DROP TABLE [Fact].[Transaction];

EXECUTE sp_rename N'[Fact].[tmp_ms_xx_Transaction]', N'Transaction';

COMMIT TRANSACTION;

SET TRANSACTION ISOLATION LEVEL READ COMMITTED;


GO
PRINT N'Dropping Partition Scheme [PS_Date]...';


GO
DROP PARTITION SCHEME [PS_Date];


GO
PRINT N'Creating Partition Scheme [PS_Date]...';


GO
CREATE PARTITION SCHEME [PS_Date]
    AS PARTITION [PF_Date]
    TO ([PRIMARY], [PRIMARY], [PRIMARY], [PRIMARY], [PRIMARY], [PRIMARY], [PRIMARY]);


GO
PRINT N'Starting rebuilding table [Fact].[Movement]...';


GO
BEGIN TRANSACTION;

SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;

SET XACT_ABORT ON;

CREATE TABLE [Fact].[tmp_ms_xx_Movement] (
    [Movement Key]                  BIGINT IDENTITY (1, 1) NOT NULL,
    [Date Key]                      DATE   NOT NULL,
    [Stock Item Key]                INT    NOT NULL,
    [Customer Key]                  INT    NULL,
    [Supplier Key]                  INT    NULL,
    [Transaction Type Key]          INT    NOT NULL,
    [WWI Stock Item Transaction ID] INT    NOT NULL,
    [WWI Invoice ID]                INT    NULL,
    [WWI Purchase Order ID]         INT    NULL,
    [Quantity]                      INT    NOT NULL,
    [Lineage Key]                   INT    NOT NULL,
    CONSTRAINT [tmp_ms_xx_constraint_PK_Fact_Movement1] PRIMARY KEY NONCLUSTERED ([Movement Key] ASC, [Date Key] ASC) ON [PS_Date] ([Date Key])
) ON [PS_Date] ([Date Key]);

IF EXISTS (SELECT TOP 1 1 
           FROM   [Fact].[Movement])
    BEGIN
        SET IDENTITY_INSERT [Fact].[tmp_ms_xx_Movement] ON;
        INSERT INTO [Fact].[tmp_ms_xx_Movement] ([Movement Key], [Date Key], [Stock Item Key], [Customer Key], [Supplier Key], [Transaction Type Key], [WWI Stock Item Transaction ID], [WWI Invoice ID], [WWI Purchase Order ID], [Quantity], [Lineage Key])
        SELECT [Movement Key],
               [Date Key],
               [Stock Item Key],
               [Customer Key],
               [Supplier Key],
               [Transaction Type Key],
               [WWI Stock Item Transaction ID],
               [WWI Invoice ID],
               [WWI Purchase Order ID],
               [Quantity],
               [Lineage Key]
        FROM   [Fact].[Movement];
        SET IDENTITY_INSERT [Fact].[tmp_ms_xx_Movement] OFF;
    END

DROP TABLE [Fact].[Movement];

EXECUTE sp_rename N'[Fact].[tmp_ms_xx_Movement]', N'Movement';

EXECUTE sp_rename N'[Fact].[tmp_ms_xx_constraint_PK_Fact_Movement1]', N'PK_Fact_Movement', N'OBJECT';

COMMIT TRANSACTION;

SET TRANSACTION ISOLATION LEVEL READ COMMITTED;


GO
PRINT N'Creating Column Store Index [Fact].[Movement].[CCX_Fact_Movement]...';


GO
CREATE CLUSTERED INDEX [CCX_Fact_Movement]
    ON [Fact].[Movement]([Movement Key])
    ON [PS_Date] ([Date Key]);

CREATE CLUSTERED COLUMNSTORE INDEX [CCX_Fact_Movement]
    ON [Fact].[Movement] WITH (DROP_EXISTING = ON)
    ON [PS_Date] ([Date Key]);


GO
PRINT N'Creating Index [Fact].[Movement].[FK_Fact_Movement_Customer_Key]...';


GO
CREATE NONCLUSTERED INDEX [FK_Fact_Movement_Customer_Key]
    ON [Fact].[Movement]([Customer Key] ASC)
    ON [PS_Date] ([Date Key]);


GO
PRINT N'Creating Index [Fact].[Movement].[FK_Fact_Movement_Date_Key]...';


GO
CREATE NONCLUSTERED INDEX [FK_Fact_Movement_Date_Key]
    ON [Fact].[Movement]([Date Key] ASC)
    ON [PS_Date] ([Date Key]);


GO
PRINT N'Creating Index [Fact].[Movement].[FK_Fact_Movement_Stock_Item_Key]...';


GO
CREATE NONCLUSTERED INDEX [FK_Fact_Movement_Stock_Item_Key]
    ON [Fact].[Movement]([Stock Item Key] ASC)
    ON [PS_Date] ([Date Key]);


GO
PRINT N'Creating Index [Fact].[Movement].[FK_Fact_Movement_Supplier_Key]...';


GO
CREATE NONCLUSTERED INDEX [FK_Fact_Movement_Supplier_Key]
    ON [Fact].[Movement]([Supplier Key] ASC)
    ON [PS_Date] ([Date Key]);


GO
PRINT N'Creating Index [Fact].[Movement].[FK_Fact_Movement_Transaction_Type_Key]...';


GO
CREATE NONCLUSTERED INDEX [FK_Fact_Movement_Transaction_Type_Key]
    ON [Fact].[Movement]([Transaction Type Key] ASC)
    ON [PS_Date] ([Date Key]);


GO
PRINT N'Creating Index [Fact].[Movement].[IX_Integration_Movement_WWI_Stock_Item_Transaction_ID]...';


GO
CREATE NONCLUSTERED INDEX [IX_Integration_Movement_WWI_Stock_Item_Transaction_ID]
    ON [Fact].[Movement]([WWI Stock Item Transaction ID] ASC)
    ON [PS_Date] ([Date Key]);


GO
PRINT N'Starting rebuilding table [Fact].[Order]...';


GO
BEGIN TRANSACTION;

SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;

SET XACT_ABORT ON;

CREATE TABLE [Fact].[tmp_ms_xx_Order] (
    [Order Key]           BIGINT          IDENTITY (1, 1) NOT NULL,
    [City Key]            INT             NOT NULL,
    [Customer Key]        INT             NOT NULL,
    [Stock Item Key]      INT             NOT NULL,
    [Order Date Key]      DATE            NOT NULL,
    [Picked Date Key]     DATE            NULL,
    [Salesperson Key]     INT             NOT NULL,
    [Picker Key]          INT             NULL,
    [WWI Order ID]        INT             NOT NULL,
    [WWI Backorder ID]    INT             NULL,
    [Description]         NVARCHAR (100)  NOT NULL,
    [Package]             NVARCHAR (50)   NOT NULL,
    [Quantity]            INT             NOT NULL,
    [Unit Price]          DECIMAL (18, 2) NOT NULL,
    [Tax Rate]            DECIMAL (18, 3) NOT NULL,
    [Total Excluding Tax] DECIMAL (18, 2) NOT NULL,
    [Tax Amount]          DECIMAL (18, 2) NOT NULL,
    [Total Including Tax] DECIMAL (18, 2) NOT NULL,
    [Lineage Key]         INT             NOT NULL,
    CONSTRAINT [tmp_ms_xx_constraint_PK_Fact_Order1] PRIMARY KEY NONCLUSTERED ([Order Key] ASC, [Order Date Key] ASC) ON [PS_Date] ([Order Date Key])
) ON [PS_Date] ([Order Date Key]);

IF EXISTS (SELECT TOP 1 1 
           FROM   [Fact].[Order])
    BEGIN
        SET IDENTITY_INSERT [Fact].[tmp_ms_xx_Order] ON;
        INSERT INTO [Fact].[tmp_ms_xx_Order] ([Order Key], [City Key], [Customer Key], [Stock Item Key], [Order Date Key], [Picked Date Key], [Salesperson Key], [Picker Key], [WWI Order ID], [WWI Backorder ID], [Description], [Package], [Quantity], [Unit Price], [Tax Rate], [Total Excluding Tax], [Tax Amount], [Total Including Tax], [Lineage Key])
        SELECT [Order Key],
               [City Key],
               [Customer Key],
               [Stock Item Key],
               [Order Date Key],
               [Picked Date Key],
               [Salesperson Key],
               [Picker Key],
               [WWI Order ID],
               [WWI Backorder ID],
               [Description],
               [Package],
               [Quantity],
               [Unit Price],
               [Tax Rate],
               [Total Excluding Tax],
               [Tax Amount],
               [Total Including Tax],
               [Lineage Key]
        FROM   [Fact].[Order];
        SET IDENTITY_INSERT [Fact].[tmp_ms_xx_Order] OFF;
    END

DROP TABLE [Fact].[Order];

EXECUTE sp_rename N'[Fact].[tmp_ms_xx_Order]', N'Order';

EXECUTE sp_rename N'[Fact].[tmp_ms_xx_constraint_PK_Fact_Order1]', N'PK_Fact_Order', N'OBJECT';

COMMIT TRANSACTION;

SET TRANSACTION ISOLATION LEVEL READ COMMITTED;


GO
PRINT N'Creating Column Store Index [Fact].[Order].[CCX_Fact_Order]...';


GO
CREATE CLUSTERED INDEX [CCX_Fact_Order]
    ON [Fact].[Order]([Order Key])
    ON [PS_Date] ([Order Date Key]);

CREATE CLUSTERED COLUMNSTORE INDEX [CCX_Fact_Order]
    ON [Fact].[Order] WITH (DROP_EXISTING = ON)
    ON [PS_Date] ([Order Date Key]);


GO
PRINT N'Creating Index [Fact].[Order].[FK_Fact_Order_City_Key]...';


GO
CREATE NONCLUSTERED INDEX [FK_Fact_Order_City_Key]
    ON [Fact].[Order]([City Key] ASC)
    ON [PS_Date] ([Order Date Key]);


GO
PRINT N'Creating Index [Fact].[Order].[FK_Fact_Order_Customer_Key]...';


GO
CREATE NONCLUSTERED INDEX [FK_Fact_Order_Customer_Key]
    ON [Fact].[Order]([Customer Key] ASC)
    ON [PS_Date] ([Order Date Key]);


GO
PRINT N'Creating Index [Fact].[Order].[FK_Fact_Order_Order_Date_Key]...';


GO
CREATE NONCLUSTERED INDEX [FK_Fact_Order_Order_Date_Key]
    ON [Fact].[Order]([Order Date Key] ASC)
    ON [PS_Date] ([Order Date Key]);


GO
PRINT N'Creating Index [Fact].[Order].[FK_Fact_Order_Picked_Date_Key]...';


GO
CREATE NONCLUSTERED INDEX [FK_Fact_Order_Picked_Date_Key]
    ON [Fact].[Order]([Picked Date Key] ASC)
    ON [PS_Date] ([Order Date Key]);


GO
PRINT N'Creating Index [Fact].[Order].[FK_Fact_Order_Picker_Key]...';


GO
CREATE NONCLUSTERED INDEX [FK_Fact_Order_Picker_Key]
    ON [Fact].[Order]([Picker Key] ASC)
    ON [PS_Date] ([Order Date Key]);


GO
PRINT N'Creating Index [Fact].[Order].[FK_Fact_Order_Salesperson_Key]...';


GO
CREATE NONCLUSTERED INDEX [FK_Fact_Order_Salesperson_Key]
    ON [Fact].[Order]([Salesperson Key] ASC)
    ON [PS_Date] ([Order Date Key]);


GO
PRINT N'Creating Index [Fact].[Order].[FK_Fact_Order_Stock_Item_Key]...';


GO
CREATE NONCLUSTERED INDEX [FK_Fact_Order_Stock_Item_Key]
    ON [Fact].[Order]([Stock Item Key] ASC)
    ON [PS_Date] ([Order Date Key]);


GO
PRINT N'Creating Index [Fact].[Order].[IX_Integration_Order_WWI_Order_ID]...';


GO
CREATE NONCLUSTERED INDEX [IX_Integration_Order_WWI_Order_ID]
    ON [Fact].[Order]([WWI Order ID] ASC)
    ON [PS_Date] ([Order Date Key]);


GO
PRINT N'Starting rebuilding table [Fact].[Purchase]...';


GO
BEGIN TRANSACTION;

SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;

SET XACT_ABORT ON;

CREATE TABLE [Fact].[tmp_ms_xx_Purchase] (
    [Purchase Key]          BIGINT        IDENTITY (1, 1) NOT NULL,
    [Date Key]              DATE          NOT NULL,
    [Supplier Key]          INT           NOT NULL,
    [Stock Item Key]        INT           NOT NULL,
    [WWI Purchase Order ID] INT           NULL,
    [Ordered Outers]        INT           NOT NULL,
    [Ordered Quantity]      INT           NOT NULL,
    [Received Outers]       INT           NOT NULL,
    [Package]               NVARCHAR (50) NOT NULL,
    [Is Order Finalized]    BIT           NOT NULL,
    [Lineage Key]           INT           NOT NULL,
    CONSTRAINT [tmp_ms_xx_constraint_PK_Fact_Purchase1] PRIMARY KEY NONCLUSTERED ([Purchase Key] ASC, [Date Key] ASC) ON [PS_Date] ([Date Key])
) ON [PS_Date] ([Date Key]);

IF EXISTS (SELECT TOP 1 1 
           FROM   [Fact].[Purchase])
    BEGIN
        SET IDENTITY_INSERT [Fact].[tmp_ms_xx_Purchase] ON;
        INSERT INTO [Fact].[tmp_ms_xx_Purchase] ([Purchase Key], [Date Key], [Supplier Key], [Stock Item Key], [WWI Purchase Order ID], [Ordered Outers], [Ordered Quantity], [Received Outers], [Package], [Is Order Finalized], [Lineage Key])
        SELECT [Purchase Key],
               [Date Key],
               [Supplier Key],
               [Stock Item Key],
               [WWI Purchase Order ID],
               [Ordered Outers],
               [Ordered Quantity],
               [Received Outers],
               [Package],
               [Is Order Finalized],
               [Lineage Key]
        FROM   [Fact].[Purchase];
        SET IDENTITY_INSERT [Fact].[tmp_ms_xx_Purchase] OFF;
    END

DROP TABLE [Fact].[Purchase];

EXECUTE sp_rename N'[Fact].[tmp_ms_xx_Purchase]', N'Purchase';

EXECUTE sp_rename N'[Fact].[tmp_ms_xx_constraint_PK_Fact_Purchase1]', N'PK_Fact_Purchase', N'OBJECT';

COMMIT TRANSACTION;

SET TRANSACTION ISOLATION LEVEL READ COMMITTED;


GO
PRINT N'Creating Column Store Index [Fact].[Purchase].[CCX_Fact_Purchase]...';


GO
CREATE CLUSTERED INDEX [CCX_Fact_Purchase]
    ON [Fact].[Purchase]([Purchase Key])
    ON [PS_Date] ([Date Key]);

CREATE CLUSTERED COLUMNSTORE INDEX [CCX_Fact_Purchase]
    ON [Fact].[Purchase] WITH (DROP_EXISTING = ON)
    ON [PS_Date] ([Date Key]);


GO
PRINT N'Creating Index [Fact].[Purchase].[FK_Fact_Purchase_Date_Key]...';


GO
CREATE NONCLUSTERED INDEX [FK_Fact_Purchase_Date_Key]
    ON [Fact].[Purchase]([Date Key] ASC)
    ON [PS_Date] ([Date Key]);


GO
PRINT N'Creating Index [Fact].[Purchase].[FK_Fact_Purchase_Stock_Item_Key]...';


GO
CREATE NONCLUSTERED INDEX [FK_Fact_Purchase_Stock_Item_Key]
    ON [Fact].[Purchase]([Stock Item Key] ASC)
    ON [PS_Date] ([Date Key]);


GO
PRINT N'Creating Index [Fact].[Purchase].[FK_Fact_Purchase_Supplier_Key]...';


GO
CREATE NONCLUSTERED INDEX [FK_Fact_Purchase_Supplier_Key]
    ON [Fact].[Purchase]([Supplier Key] ASC)
    ON [PS_Date] ([Date Key]);


GO
PRINT N'Starting rebuilding table [Fact].[Sale]...';


GO
BEGIN TRANSACTION;

SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;

SET XACT_ABORT ON;

CREATE TABLE [Fact].[tmp_ms_xx_Sale] (
    [Sale Key]             BIGINT          IDENTITY (1, 1) NOT NULL,
    [City Key]             INT             NOT NULL,
    [Customer Key]         INT             NOT NULL,
    [Bill To Customer Key] INT             NOT NULL,
    [Stock Item Key]       INT             NOT NULL,
    [Invoice Date Key]     DATE            NOT NULL,
    [Delivery Date Key]    DATE            NULL,
    [Salesperson Key]      INT             NOT NULL,
    [WWI Invoice ID]       INT             NOT NULL,
    [Description]          NVARCHAR (100)  NOT NULL,
    [Package]              NVARCHAR (50)   NOT NULL,
    [Quantity]             INT             NOT NULL,
    [Unit Price]           DECIMAL (18, 2) NOT NULL,
    [Tax Rate]             DECIMAL (18, 3) NOT NULL,
    [Total Excluding Tax]  DECIMAL (18, 2) NOT NULL,
    [Tax Amount]           DECIMAL (18, 2) NOT NULL,
    [Profit]               DECIMAL (18, 2) NOT NULL,
    [Total Including Tax]  DECIMAL (18, 2) NOT NULL,
    [Total Dry Items]      INT             NOT NULL,
    [Total Chiller Items]  INT             NOT NULL,
    [Lineage Key]          INT             NOT NULL,
    CONSTRAINT [tmp_ms_xx_constraint_PK_Fact_Sale1] PRIMARY KEY NONCLUSTERED ([Sale Key] ASC, [Invoice Date Key] ASC) ON [PS_Date] ([Invoice Date Key])
) ON [PS_Date] ([Invoice Date Key]);

IF EXISTS (SELECT TOP 1 1 
           FROM   [Fact].[Sale])
    BEGIN
        SET IDENTITY_INSERT [Fact].[tmp_ms_xx_Sale] ON;
        INSERT INTO [Fact].[tmp_ms_xx_Sale] ([Sale Key], [City Key], [Customer Key], [Bill To Customer Key], [Stock Item Key], [Invoice Date Key], [Delivery Date Key], [Salesperson Key], [WWI Invoice ID], [Description], [Package], [Quantity], [Unit Price], [Tax Rate], [Total Excluding Tax], [Tax Amount], [Profit], [Total Including Tax], [Total Dry Items], [Total Chiller Items], [Lineage Key])
        SELECT [Sale Key],
               [City Key],
               [Customer Key],
               [Bill To Customer Key],
               [Stock Item Key],
               [Invoice Date Key],
               [Delivery Date Key],
               [Salesperson Key],
               [WWI Invoice ID],
               [Description],
               [Package],
               [Quantity],
               [Unit Price],
               [Tax Rate],
               [Total Excluding Tax],
               [Tax Amount],
               [Profit],
               [Total Including Tax],
               [Total Dry Items],
               [Total Chiller Items],
               [Lineage Key]
        FROM   [Fact].[Sale];
        SET IDENTITY_INSERT [Fact].[tmp_ms_xx_Sale] OFF;
    END

DROP TABLE [Fact].[Sale];

EXECUTE sp_rename N'[Fact].[tmp_ms_xx_Sale]', N'Sale';

EXECUTE sp_rename N'[Fact].[tmp_ms_xx_constraint_PK_Fact_Sale1]', N'PK_Fact_Sale', N'OBJECT';

COMMIT TRANSACTION;

SET TRANSACTION ISOLATION LEVEL READ COMMITTED;


GO
PRINT N'Creating Column Store Index [Fact].[Sale].[CCX_Fact_Sale]...';


GO
CREATE CLUSTERED INDEX [CCX_Fact_Sale]
    ON [Fact].[Sale]([Sale Key])
    ON [PS_Date] ([Invoice Date Key]);

CREATE CLUSTERED COLUMNSTORE INDEX [CCX_Fact_Sale]
    ON [Fact].[Sale] WITH (DROP_EXISTING = ON)
    ON [PS_Date] ([Invoice Date Key]);


GO
PRINT N'Creating Index [Fact].[Sale].[FK_Fact_Sale_Bill_To_Customer_Key]...';


GO
CREATE NONCLUSTERED INDEX [FK_Fact_Sale_Bill_To_Customer_Key]
    ON [Fact].[Sale]([Bill To Customer Key] ASC)
    ON [PS_Date] ([Invoice Date Key]);


GO
PRINT N'Creating Index [Fact].[Sale].[FK_Fact_Sale_City_Key]...';


GO
CREATE NONCLUSTERED INDEX [FK_Fact_Sale_City_Key]
    ON [Fact].[Sale]([City Key] ASC)
    ON [PS_Date] ([Invoice Date Key]);


GO
PRINT N'Creating Index [Fact].[Sale].[FK_Fact_Sale_Customer_Key]...';


GO
CREATE NONCLUSTERED INDEX [FK_Fact_Sale_Customer_Key]
    ON [Fact].[Sale]([Customer Key] ASC)
    ON [PS_Date] ([Invoice Date Key]);


GO
PRINT N'Creating Index [Fact].[Sale].[FK_Fact_Sale_Delivery_Date_Key]...';


GO
CREATE NONCLUSTERED INDEX [FK_Fact_Sale_Delivery_Date_Key]
    ON [Fact].[Sale]([Delivery Date Key] ASC)
    ON [PS_Date] ([Invoice Date Key]);


GO
PRINT N'Creating Index [Fact].[Sale].[FK_Fact_Sale_Invoice_Date_Key]...';


GO
CREATE NONCLUSTERED INDEX [FK_Fact_Sale_Invoice_Date_Key]
    ON [Fact].[Sale]([Invoice Date Key] ASC)
    ON [PS_Date] ([Invoice Date Key]);


GO
PRINT N'Creating Index [Fact].[Sale].[FK_Fact_Sale_Salesperson_Key]...';


GO
CREATE NONCLUSTERED INDEX [FK_Fact_Sale_Salesperson_Key]
    ON [Fact].[Sale]([Salesperson Key] ASC)
    ON [PS_Date] ([Invoice Date Key]);


GO
PRINT N'Creating Index [Fact].[Sale].[FK_Fact_Sale_Stock_Item_Key]...';


GO
CREATE NONCLUSTERED INDEX [FK_Fact_Sale_Stock_Item_Key]
    ON [Fact].[Sale]([Stock Item Key] ASC)
    ON [PS_Date] ([Invoice Date Key]);


GO
PRINT N'Starting rebuilding table [Fact].[Transaction]...';


GO
BEGIN TRANSACTION;

SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;

SET XACT_ABORT ON;

CREATE TABLE [Fact].[tmp_ms_xx_Transaction] (
    [Transaction Key]             BIGINT          IDENTITY (1, 1) NOT NULL,
    [Date Key]                    DATE            NOT NULL,
    [Customer Key]                INT             NULL,
    [Bill To Customer Key]        INT             NULL,
    [Supplier Key]                INT             NULL,
    [Transaction Type Key]        INT             NOT NULL,
    [Payment Method Key]          INT             NULL,
    [WWI Customer Transaction ID] INT             NULL,
    [WWI Supplier Transaction ID] INT             NULL,
    [WWI Invoice ID]              INT             NULL,
    [WWI Purchase Order ID]       INT             NULL,
    [Supplier Invoice Number]     NVARCHAR (20)   NULL,
    [Total Excluding Tax]         DECIMAL (18, 2) NOT NULL,
    [Tax Amount]                  DECIMAL (18, 2) NOT NULL,
    [Total Including Tax]         DECIMAL (18, 2) NOT NULL,
    [Outstanding Balance]         DECIMAL (18, 2) NOT NULL,
    [Is Finalized]                BIT             NOT NULL,
    [Lineage Key]                 INT             NOT NULL,
    CONSTRAINT [tmp_ms_xx_constraint_PK_Fact_Transaction1] PRIMARY KEY NONCLUSTERED ([Transaction Key] ASC, [Date Key] ASC) ON [PS_Date] ([Date Key])
) ON [PS_Date] ([Date Key]);

IF EXISTS (SELECT TOP 1 1 
           FROM   [Fact].[Transaction])
    BEGIN
        SET IDENTITY_INSERT [Fact].[tmp_ms_xx_Transaction] ON;
        INSERT INTO [Fact].[tmp_ms_xx_Transaction] ([Transaction Key], [Date Key], [Customer Key], [Bill To Customer Key], [Supplier Key], [Transaction Type Key], [Payment Method Key], [WWI Customer Transaction ID], [WWI Supplier Transaction ID], [WWI Invoice ID], [WWI Purchase Order ID], [Supplier Invoice Number], [Total Excluding Tax], [Tax Amount], [Total Including Tax], [Outstanding Balance], [Is Finalized], [Lineage Key])
        SELECT [Transaction Key],
               [Date Key],
               [Customer Key],
               [Bill To Customer Key],
               [Supplier Key],
               [Transaction Type Key],
               [Payment Method Key],
               [WWI Customer Transaction ID],
               [WWI Supplier Transaction ID],
               [WWI Invoice ID],
               [WWI Purchase Order ID],
               [Supplier Invoice Number],
               [Total Excluding Tax],
               [Tax Amount],
               [Total Including Tax],
               [Outstanding Balance],
               [Is Finalized],
               [Lineage Key]
        FROM   [Fact].[Transaction];
        SET IDENTITY_INSERT [Fact].[tmp_ms_xx_Transaction] OFF;
    END

DROP TABLE [Fact].[Transaction];

EXECUTE sp_rename N'[Fact].[tmp_ms_xx_Transaction]', N'Transaction';

EXECUTE sp_rename N'[Fact].[tmp_ms_xx_constraint_PK_Fact_Transaction1]', N'PK_Fact_Transaction', N'OBJECT';

COMMIT TRANSACTION;

SET TRANSACTION ISOLATION LEVEL READ COMMITTED;


GO
PRINT N'Creating Column Store Index [Fact].[Transaction].[CCX_Fact_Transaction]...';


GO
CREATE CLUSTERED INDEX [CCX_Fact_Transaction]
    ON [Fact].[Transaction]([Transaction Key])
    ON [PS_Date] ([Date Key]);

CREATE CLUSTERED COLUMNSTORE INDEX [CCX_Fact_Transaction]
    ON [Fact].[Transaction] WITH (DROP_EXISTING = ON)
    ON [PS_Date] ([Date Key]);


GO
PRINT N'Creating Index [Fact].[Transaction].[FK_Fact_Transaction_Bill_To_Customer_Key]...';


GO
CREATE NONCLUSTERED INDEX [FK_Fact_Transaction_Bill_To_Customer_Key]
    ON [Fact].[Transaction]([Bill To Customer Key] ASC)
    ON [PS_Date] ([Date Key]);


GO
PRINT N'Creating Index [Fact].[Transaction].[FK_Fact_Transaction_Customer_Key]...';


GO
CREATE NONCLUSTERED INDEX [FK_Fact_Transaction_Customer_Key]
    ON [Fact].[Transaction]([Customer Key] ASC)
    ON [PS_Date] ([Date Key]);


GO
PRINT N'Creating Index [Fact].[Transaction].[FK_Fact_Transaction_Date_Key]...';


GO
CREATE NONCLUSTERED INDEX [FK_Fact_Transaction_Date_Key]
    ON [Fact].[Transaction]([Date Key] ASC)
    ON [PS_Date] ([Date Key]);


GO
PRINT N'Creating Index [Fact].[Transaction].[FK_Fact_Transaction_Payment_Method_Key]...';


GO
CREATE NONCLUSTERED INDEX [FK_Fact_Transaction_Payment_Method_Key]
    ON [Fact].[Transaction]([Payment Method Key] ASC)
    ON [PS_Date] ([Date Key]);


GO
PRINT N'Creating Index [Fact].[Transaction].[FK_Fact_Transaction_Supplier_Key]...';


GO
CREATE NONCLUSTERED INDEX [FK_Fact_Transaction_Supplier_Key]
    ON [Fact].[Transaction]([Supplier Key] ASC)
    ON [PS_Date] ([Date Key]);


GO
PRINT N'Creating Index [Fact].[Transaction].[FK_Fact_Transaction_Transaction_Type_Key]...';


GO
CREATE NONCLUSTERED INDEX [FK_Fact_Transaction_Transaction_Type_Key]
    ON [Fact].[Transaction]([Transaction Type Key] ASC)
    ON [PS_Date] ([Date Key]);


GO
PRINT N'Creating Foreign Key [Fact].[FK_Fact_Movement_Date_Key_Dimension_Date]...';


GO
ALTER TABLE [Fact].[Movement] WITH NOCHECK
    ADD CONSTRAINT [FK_Fact_Movement_Date_Key_Dimension_Date] FOREIGN KEY ([Date Key]) REFERENCES [Dimension].[Date] ([Date]);


GO
PRINT N'Creating Foreign Key [Fact].[FK_Fact_Movement_Stock_Item_Key_Dimension_Stock Item]...';


GO
ALTER TABLE [Fact].[Movement] WITH NOCHECK
    ADD CONSTRAINT [FK_Fact_Movement_Stock_Item_Key_Dimension_Stock Item] FOREIGN KEY ([Stock Item Key]) REFERENCES [Dimension].[Stock Item] ([Stock Item Key]);


GO
PRINT N'Creating Foreign Key [Fact].[FK_Fact_Movement_Customer_Key_Dimension_Customer]...';


GO
ALTER TABLE [Fact].[Movement] WITH NOCHECK
    ADD CONSTRAINT [FK_Fact_Movement_Customer_Key_Dimension_Customer] FOREIGN KEY ([Customer Key]) REFERENCES [Dimension].[Customer] ([Customer Key]);


GO
PRINT N'Creating Foreign Key [Fact].[FK_Fact_Movement_Supplier_Key_Dimension_Supplier]...';


GO
ALTER TABLE [Fact].[Movement] WITH NOCHECK
    ADD CONSTRAINT [FK_Fact_Movement_Supplier_Key_Dimension_Supplier] FOREIGN KEY ([Supplier Key]) REFERENCES [Dimension].[Supplier] ([Supplier Key]);


GO
PRINT N'Creating Foreign Key [Fact].[FK_Fact_Movement_Transaction_Type_Key_Dimension_Transaction Type]...';


GO
ALTER TABLE [Fact].[Movement] WITH NOCHECK
    ADD CONSTRAINT [FK_Fact_Movement_Transaction_Type_Key_Dimension_Transaction Type] FOREIGN KEY ([Transaction Type Key]) REFERENCES [Dimension].[Transaction Type] ([Transaction Type Key]);


GO
PRINT N'Creating Foreign Key [Fact].[FK_Fact_Order_City_Key_Dimension_City]...';


GO
ALTER TABLE [Fact].[Order] WITH NOCHECK
    ADD CONSTRAINT [FK_Fact_Order_City_Key_Dimension_City] FOREIGN KEY ([City Key]) REFERENCES [Dimension].[City] ([City Key]);


GO
PRINT N'Creating Foreign Key [Fact].[FK_Fact_Order_Customer_Key_Dimension_Customer]...';


GO
ALTER TABLE [Fact].[Order] WITH NOCHECK
    ADD CONSTRAINT [FK_Fact_Order_Customer_Key_Dimension_Customer] FOREIGN KEY ([Customer Key]) REFERENCES [Dimension].[Customer] ([Customer Key]);


GO
PRINT N'Creating Foreign Key [Fact].[FK_Fact_Order_Stock_Item_Key_Dimension_Stock Item]...';


GO
ALTER TABLE [Fact].[Order] WITH NOCHECK
    ADD CONSTRAINT [FK_Fact_Order_Stock_Item_Key_Dimension_Stock Item] FOREIGN KEY ([Stock Item Key]) REFERENCES [Dimension].[Stock Item] ([Stock Item Key]);


GO
PRINT N'Creating Foreign Key [Fact].[FK_Fact_Order_Order_Date_Key_Dimension_Date]...';


GO
ALTER TABLE [Fact].[Order] WITH NOCHECK
    ADD CONSTRAINT [FK_Fact_Order_Order_Date_Key_Dimension_Date] FOREIGN KEY ([Order Date Key]) REFERENCES [Dimension].[Date] ([Date]);


GO
PRINT N'Creating Foreign Key [Fact].[FK_Fact_Order_Picked_Date_Key_Dimension_Date]...';


GO
ALTER TABLE [Fact].[Order] WITH NOCHECK
    ADD CONSTRAINT [FK_Fact_Order_Picked_Date_Key_Dimension_Date] FOREIGN KEY ([Picked Date Key]) REFERENCES [Dimension].[Date] ([Date]);


GO
PRINT N'Creating Foreign Key [Fact].[FK_Fact_Order_Salesperson_Key_Dimension_Employee]...';


GO
ALTER TABLE [Fact].[Order] WITH NOCHECK
    ADD CONSTRAINT [FK_Fact_Order_Salesperson_Key_Dimension_Employee] FOREIGN KEY ([Salesperson Key]) REFERENCES [Dimension].[Employee] ([Employee Key]);


GO
PRINT N'Creating Foreign Key [Fact].[FK_Fact_Order_Picker_Key_Dimension_Employee]...';


GO
ALTER TABLE [Fact].[Order] WITH NOCHECK
    ADD CONSTRAINT [FK_Fact_Order_Picker_Key_Dimension_Employee] FOREIGN KEY ([Picker Key]) REFERENCES [Dimension].[Employee] ([Employee Key]);


GO
PRINT N'Creating Foreign Key [Fact].[FK_Fact_Purchase_Date_Key_Dimension_Date]...';


GO
ALTER TABLE [Fact].[Purchase] WITH NOCHECK
    ADD CONSTRAINT [FK_Fact_Purchase_Date_Key_Dimension_Date] FOREIGN KEY ([Date Key]) REFERENCES [Dimension].[Date] ([Date]);


GO
PRINT N'Creating Foreign Key [Fact].[FK_Fact_Purchase_Supplier_Key_Dimension_Supplier]...';


GO
ALTER TABLE [Fact].[Purchase] WITH NOCHECK
    ADD CONSTRAINT [FK_Fact_Purchase_Supplier_Key_Dimension_Supplier] FOREIGN KEY ([Supplier Key]) REFERENCES [Dimension].[Supplier] ([Supplier Key]);


GO
PRINT N'Creating Foreign Key [Fact].[FK_Fact_Purchase_Stock_Item_Key_Dimension_Stock Item]...';


GO
ALTER TABLE [Fact].[Purchase] WITH NOCHECK
    ADD CONSTRAINT [FK_Fact_Purchase_Stock_Item_Key_Dimension_Stock Item] FOREIGN KEY ([Stock Item Key]) REFERENCES [Dimension].[Stock Item] ([Stock Item Key]);


GO
PRINT N'Creating Foreign Key [Fact].[FK_Fact_Sale_City_Key_Dimension_City]...';


GO
ALTER TABLE [Fact].[Sale] WITH NOCHECK
    ADD CONSTRAINT [FK_Fact_Sale_City_Key_Dimension_City] FOREIGN KEY ([City Key]) REFERENCES [Dimension].[City] ([City Key]);


GO
PRINT N'Creating Foreign Key [Fact].[FK_Fact_Sale_Customer_Key_Dimension_Customer]...';


GO
ALTER TABLE [Fact].[Sale] WITH NOCHECK
    ADD CONSTRAINT [FK_Fact_Sale_Customer_Key_Dimension_Customer] FOREIGN KEY ([Customer Key]) REFERENCES [Dimension].[Customer] ([Customer Key]);


GO
PRINT N'Creating Foreign Key [Fact].[FK_Fact_Sale_Bill_To_Customer_Key_Dimension_Customer]...';


GO
ALTER TABLE [Fact].[Sale] WITH NOCHECK
    ADD CONSTRAINT [FK_Fact_Sale_Bill_To_Customer_Key_Dimension_Customer] FOREIGN KEY ([Bill To Customer Key]) REFERENCES [Dimension].[Customer] ([Customer Key]);


GO
PRINT N'Creating Foreign Key [Fact].[FK_Fact_Sale_Stock_Item_Key_Dimension_Stock Item]...';


GO
ALTER TABLE [Fact].[Sale] WITH NOCHECK
    ADD CONSTRAINT [FK_Fact_Sale_Stock_Item_Key_Dimension_Stock Item] FOREIGN KEY ([Stock Item Key]) REFERENCES [Dimension].[Stock Item] ([Stock Item Key]);


GO
PRINT N'Creating Foreign Key [Fact].[FK_Fact_Sale_Invoice_Date_Key_Dimension_Date]...';


GO
ALTER TABLE [Fact].[Sale] WITH NOCHECK
    ADD CONSTRAINT [FK_Fact_Sale_Invoice_Date_Key_Dimension_Date] FOREIGN KEY ([Invoice Date Key]) REFERENCES [Dimension].[Date] ([Date]);


GO
PRINT N'Creating Foreign Key [Fact].[FK_Fact_Sale_Delivery_Date_Key_Dimension_Date]...';


GO
ALTER TABLE [Fact].[Sale] WITH NOCHECK
    ADD CONSTRAINT [FK_Fact_Sale_Delivery_Date_Key_Dimension_Date] FOREIGN KEY ([Delivery Date Key]) REFERENCES [Dimension].[Date] ([Date]);


GO
PRINT N'Creating Foreign Key [Fact].[FK_Fact_Sale_Salesperson_Key_Dimension_Employee]...';


GO
ALTER TABLE [Fact].[Sale] WITH NOCHECK
    ADD CONSTRAINT [FK_Fact_Sale_Salesperson_Key_Dimension_Employee] FOREIGN KEY ([Salesperson Key]) REFERENCES [Dimension].[Employee] ([Employee Key]);


GO
PRINT N'Creating Foreign Key [Fact].[FK_Fact_Transaction_Date_Key_Dimension_Date]...';


GO
ALTER TABLE [Fact].[Transaction] WITH NOCHECK
    ADD CONSTRAINT [FK_Fact_Transaction_Date_Key_Dimension_Date] FOREIGN KEY ([Date Key]) REFERENCES [Dimension].[Date] ([Date]);


GO
PRINT N'Creating Foreign Key [Fact].[FK_Fact_Transaction_Customer_Key_Dimension_Customer]...';


GO
ALTER TABLE [Fact].[Transaction] WITH NOCHECK
    ADD CONSTRAINT [FK_Fact_Transaction_Customer_Key_Dimension_Customer] FOREIGN KEY ([Customer Key]) REFERENCES [Dimension].[Customer] ([Customer Key]);


GO
PRINT N'Creating Foreign Key [Fact].[FK_Fact_Transaction_Bill_To_Customer_Key_Dimension_Customer]...';


GO
ALTER TABLE [Fact].[Transaction] WITH NOCHECK
    ADD CONSTRAINT [FK_Fact_Transaction_Bill_To_Customer_Key_Dimension_Customer] FOREIGN KEY ([Bill To Customer Key]) REFERENCES [Dimension].[Customer] ([Customer Key]);


GO
PRINT N'Creating Foreign Key [Fact].[FK_Fact_Transaction_Supplier_Key_Dimension_Supplier]...';


GO
ALTER TABLE [Fact].[Transaction] WITH NOCHECK
    ADD CONSTRAINT [FK_Fact_Transaction_Supplier_Key_Dimension_Supplier] FOREIGN KEY ([Supplier Key]) REFERENCES [Dimension].[Supplier] ([Supplier Key]);


GO
PRINT N'Creating Foreign Key [Fact].[FK_Fact_Transaction_Transaction_Type_Key_Dimension_Transaction Type]...';


GO
ALTER TABLE [Fact].[Transaction] WITH NOCHECK
    ADD CONSTRAINT [FK_Fact_Transaction_Transaction_Type_Key_Dimension_Transaction Type] FOREIGN KEY ([Transaction Type Key]) REFERENCES [Dimension].[Transaction Type] ([Transaction Type Key]);


GO
PRINT N'Creating Foreign Key [Fact].[FK_Fact_Transaction_Payment_Method_Key_Dimension_Payment Method]...';


GO
ALTER TABLE [Fact].[Transaction] WITH NOCHECK
    ADD CONSTRAINT [FK_Fact_Transaction_Payment_Method_Key_Dimension_Payment Method] FOREIGN KEY ([Payment Method Key]) REFERENCES [Dimension].[Payment Method] ([Payment Method Key]);


GO
PRINT N'Creating Extended Property [Fact].[Movement].[Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'Description', @value = N'Movement fact table (movements of stock items)', @level0type = N'SCHEMA', @level0name = N'Fact', @level1type = N'TABLE', @level1name = N'Movement';


GO
PRINT N'Creating Extended Property [Fact].[Movement].[Movement Key].[Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'Description', @value = 'DW key for a row in the Movement fact', @level0type = N'SCHEMA', @level0name = N'Fact', @level1type = N'TABLE', @level1name = N'Movement', @level2type = N'COLUMN', @level2name = N'Movement Key';


GO
PRINT N'Creating Extended Property [Fact].[Movement].[Date Key].[Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'Description', @value = 'Transaction date', @level0type = N'SCHEMA', @level0name = N'Fact', @level1type = N'TABLE', @level1name = N'Movement', @level2type = N'COLUMN', @level2name = N'Date Key';


GO
PRINT N'Creating Extended Property [Fact].[Movement].[Stock Item Key].[Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'Description', @value = 'Stock item for this purchase order', @level0type = N'SCHEMA', @level0name = N'Fact', @level1type = N'TABLE', @level1name = N'Movement', @level2type = N'COLUMN', @level2name = N'Stock Item Key';


GO
PRINT N'Creating Extended Property [Fact].[Movement].[Customer Key].[Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'Description', @value = 'Customer (if applicable)', @level0type = N'SCHEMA', @level0name = N'Fact', @level1type = N'TABLE', @level1name = N'Movement', @level2type = N'COLUMN', @level2name = N'Customer Key';


GO
PRINT N'Creating Extended Property [Fact].[Movement].[Supplier Key].[Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'Description', @value = 'Supplier (if applicable)', @level0type = N'SCHEMA', @level0name = N'Fact', @level1type = N'TABLE', @level1name = N'Movement', @level2type = N'COLUMN', @level2name = N'Supplier Key';


GO
PRINT N'Creating Extended Property [Fact].[Movement].[Transaction Type Key].[Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'Description', @value = 'Type of transaction', @level0type = N'SCHEMA', @level0name = N'Fact', @level1type = N'TABLE', @level1name = N'Movement', @level2type = N'COLUMN', @level2name = N'Transaction Type Key';


GO
PRINT N'Creating Extended Property [Fact].[Movement].[WWI Stock Item Transaction ID].[Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'Description', @value = 'Stock item transaction ID in source system', @level0type = N'SCHEMA', @level0name = N'Fact', @level1type = N'TABLE', @level1name = N'Movement', @level2type = N'COLUMN', @level2name = N'WWI Stock Item Transaction ID';


GO
PRINT N'Creating Extended Property [Fact].[Movement].[WWI Invoice ID].[Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'Description', @value = 'Invoice ID in source system', @level0type = N'SCHEMA', @level0name = N'Fact', @level1type = N'TABLE', @level1name = N'Movement', @level2type = N'COLUMN', @level2name = N'WWI Invoice ID';


GO
PRINT N'Creating Extended Property [Fact].[Movement].[WWI Purchase Order ID].[Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'Description', @value = 'Purchase order ID in source system', @level0type = N'SCHEMA', @level0name = N'Fact', @level1type = N'TABLE', @level1name = N'Movement', @level2type = N'COLUMN', @level2name = N'WWI Purchase Order ID';


GO
PRINT N'Creating Extended Property [Fact].[Movement].[Quantity].[Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'Description', @value = 'Quantity of stock movement (positive is incoming stock, negative is outgoing)', @level0type = N'SCHEMA', @level0name = N'Fact', @level1type = N'TABLE', @level1name = N'Movement', @level2type = N'COLUMN', @level2name = N'Quantity';


GO
PRINT N'Creating Extended Property [Fact].[Movement].[Lineage Key].[Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'Description', @value = 'Lineage Key for the data load for this row', @level0type = N'SCHEMA', @level0name = N'Fact', @level1type = N'TABLE', @level1name = N'Movement', @level2type = N'COLUMN', @level2name = N'Lineage Key';


GO
PRINT N'Creating Extended Property [Fact].[Order].[Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'Description', @value = N'Order fact table (customer orders)', @level0type = N'SCHEMA', @level0name = N'Fact', @level1type = N'TABLE', @level1name = N'Order';


GO
PRINT N'Creating Extended Property [Fact].[Order].[Order Key].[Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'Description', @value = 'DW key for a row in the Order fact', @level0type = N'SCHEMA', @level0name = N'Fact', @level1type = N'TABLE', @level1name = N'Order', @level2type = N'COLUMN', @level2name = N'Order Key';


GO
PRINT N'Creating Extended Property [Fact].[Order].[City Key].[Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'Description', @value = 'City for this order', @level0type = N'SCHEMA', @level0name = N'Fact', @level1type = N'TABLE', @level1name = N'Order', @level2type = N'COLUMN', @level2name = N'City Key';


GO
PRINT N'Creating Extended Property [Fact].[Order].[Customer Key].[Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'Description', @value = 'Customer for this order', @level0type = N'SCHEMA', @level0name = N'Fact', @level1type = N'TABLE', @level1name = N'Order', @level2type = N'COLUMN', @level2name = N'Customer Key';


GO
PRINT N'Creating Extended Property [Fact].[Order].[Stock Item Key].[Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'Description', @value = 'Stock item for this order', @level0type = N'SCHEMA', @level0name = N'Fact', @level1type = N'TABLE', @level1name = N'Order', @level2type = N'COLUMN', @level2name = N'Stock Item Key';


GO
PRINT N'Creating Extended Property [Fact].[Order].[Order Date Key].[Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'Description', @value = 'Order date for this order', @level0type = N'SCHEMA', @level0name = N'Fact', @level1type = N'TABLE', @level1name = N'Order', @level2type = N'COLUMN', @level2name = N'Order Date Key';


GO
PRINT N'Creating Extended Property [Fact].[Order].[Picked Date Key].[Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'Description', @value = 'Picked date for this order', @level0type = N'SCHEMA', @level0name = N'Fact', @level1type = N'TABLE', @level1name = N'Order', @level2type = N'COLUMN', @level2name = N'Picked Date Key';


GO
PRINT N'Creating Extended Property [Fact].[Order].[Salesperson Key].[Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'Description', @value = 'Salesperson for this order', @level0type = N'SCHEMA', @level0name = N'Fact', @level1type = N'TABLE', @level1name = N'Order', @level2type = N'COLUMN', @level2name = N'Salesperson Key';


GO
PRINT N'Creating Extended Property [Fact].[Order].[Picker Key].[Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'Description', @value = 'Picker for this order', @level0type = N'SCHEMA', @level0name = N'Fact', @level1type = N'TABLE', @level1name = N'Order', @level2type = N'COLUMN', @level2name = N'Picker Key';


GO
PRINT N'Creating Extended Property [Fact].[Order].[WWI Order ID].[Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'Description', @value = 'OrderID in source system', @level0type = N'SCHEMA', @level0name = N'Fact', @level1type = N'TABLE', @level1name = N'Order', @level2type = N'COLUMN', @level2name = N'WWI Order ID';


GO
PRINT N'Creating Extended Property [Fact].[Order].[WWI Backorder ID].[Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'Description', @value = 'BackorderID in source system', @level0type = N'SCHEMA', @level0name = N'Fact', @level1type = N'TABLE', @level1name = N'Order', @level2type = N'COLUMN', @level2name = N'WWI Backorder ID';


GO
PRINT N'Creating Extended Property [Fact].[Order].[Description].[Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'Description', @value = 'Description of the item supplied (Usually the stock item name but can be overridden)', @level0type = N'SCHEMA', @level0name = N'Fact', @level1type = N'TABLE', @level1name = N'Order', @level2type = N'COLUMN', @level2name = N'Description';


GO
PRINT N'Creating Extended Property [Fact].[Order].[Package].[Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'Description', @value = 'Type of package to be supplied', @level0type = N'SCHEMA', @level0name = N'Fact', @level1type = N'TABLE', @level1name = N'Order', @level2type = N'COLUMN', @level2name = N'Package';


GO
PRINT N'Creating Extended Property [Fact].[Order].[Quantity].[Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'Description', @value = 'Quantity to be supplied', @level0type = N'SCHEMA', @level0name = N'Fact', @level1type = N'TABLE', @level1name = N'Order', @level2type = N'COLUMN', @level2name = N'Quantity';


GO
PRINT N'Creating Extended Property [Fact].[Order].[Unit Price].[Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'Description', @value = 'Unit price to be charged', @level0type = N'SCHEMA', @level0name = N'Fact', @level1type = N'TABLE', @level1name = N'Order', @level2type = N'COLUMN', @level2name = N'Unit Price';


GO
PRINT N'Creating Extended Property [Fact].[Order].[Tax Rate].[Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'Description', @value = 'Tax rate to be applied', @level0type = N'SCHEMA', @level0name = N'Fact', @level1type = N'TABLE', @level1name = N'Order', @level2type = N'COLUMN', @level2name = N'Tax Rate';


GO
PRINT N'Creating Extended Property [Fact].[Order].[Total Excluding Tax].[Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'Description', @value = 'Total amount excluding tax', @level0type = N'SCHEMA', @level0name = N'Fact', @level1type = N'TABLE', @level1name = N'Order', @level2type = N'COLUMN', @level2name = N'Total Excluding Tax';


GO
PRINT N'Creating Extended Property [Fact].[Order].[Tax Amount].[Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'Description', @value = 'Total amount of tax', @level0type = N'SCHEMA', @level0name = N'Fact', @level1type = N'TABLE', @level1name = N'Order', @level2type = N'COLUMN', @level2name = N'Tax Amount';


GO
PRINT N'Creating Extended Property [Fact].[Order].[Total Including Tax].[Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'Description', @value = 'Total amount including tax', @level0type = N'SCHEMA', @level0name = N'Fact', @level1type = N'TABLE', @level1name = N'Order', @level2type = N'COLUMN', @level2name = N'Total Including Tax';


GO
PRINT N'Creating Extended Property [Fact].[Order].[Lineage Key].[Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'Description', @value = 'Lineage Key for the data load for this row', @level0type = N'SCHEMA', @level0name = N'Fact', @level1type = N'TABLE', @level1name = N'Order', @level2type = N'COLUMN', @level2name = N'Lineage Key';


GO
PRINT N'Creating Extended Property [Fact].[Purchase].[Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'Description', @value = N'Purchase fact table (stock purchases from suppliers)', @level0type = N'SCHEMA', @level0name = N'Fact', @level1type = N'TABLE', @level1name = N'Purchase';


GO
PRINT N'Creating Extended Property [Fact].[Purchase].[Purchase Key].[Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'Description', @value = 'DW key for a row in the Purchase fact', @level0type = N'SCHEMA', @level0name = N'Fact', @level1type = N'TABLE', @level1name = N'Purchase', @level2type = N'COLUMN', @level2name = N'Purchase Key';


GO
PRINT N'Creating Extended Property [Fact].[Purchase].[Date Key].[Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'Description', @value = 'Purchase order date', @level0type = N'SCHEMA', @level0name = N'Fact', @level1type = N'TABLE', @level1name = N'Purchase', @level2type = N'COLUMN', @level2name = N'Date Key';


GO
PRINT N'Creating Extended Property [Fact].[Purchase].[Supplier Key].[Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'Description', @value = 'Supplier for this purchase order', @level0type = N'SCHEMA', @level0name = N'Fact', @level1type = N'TABLE', @level1name = N'Purchase', @level2type = N'COLUMN', @level2name = N'Supplier Key';


GO
PRINT N'Creating Extended Property [Fact].[Purchase].[Stock Item Key].[Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'Description', @value = 'Stock item for this purchase order', @level0type = N'SCHEMA', @level0name = N'Fact', @level1type = N'TABLE', @level1name = N'Purchase', @level2type = N'COLUMN', @level2name = N'Stock Item Key';


GO
PRINT N'Creating Extended Property [Fact].[Purchase].[WWI Purchase Order ID].[Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'Description', @value = 'Purchase order ID in source system ', @level0type = N'SCHEMA', @level0name = N'Fact', @level1type = N'TABLE', @level1name = N'Purchase', @level2type = N'COLUMN', @level2name = N'WWI Purchase Order ID';


GO
PRINT N'Creating Extended Property [Fact].[Purchase].[Ordered Outers].[Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'Description', @value = 'Quantity of outers (ordering packages)', @level0type = N'SCHEMA', @level0name = N'Fact', @level1type = N'TABLE', @level1name = N'Purchase', @level2type = N'COLUMN', @level2name = N'Ordered Outers';


GO
PRINT N'Creating Extended Property [Fact].[Purchase].[Ordered Quantity].[Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'Description', @value = 'Quantity of inners (selling packages)', @level0type = N'SCHEMA', @level0name = N'Fact', @level1type = N'TABLE', @level1name = N'Purchase', @level2type = N'COLUMN', @level2name = N'Ordered Quantity';


GO
PRINT N'Creating Extended Property [Fact].[Purchase].[Received Outers].[Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'Description', @value = 'Received outers (so far)', @level0type = N'SCHEMA', @level0name = N'Fact', @level1type = N'TABLE', @level1name = N'Purchase', @level2type = N'COLUMN', @level2name = N'Received Outers';


GO
PRINT N'Creating Extended Property [Fact].[Purchase].[Package].[Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'Description', @value = 'Package ordered', @level0type = N'SCHEMA', @level0name = N'Fact', @level1type = N'TABLE', @level1name = N'Purchase', @level2type = N'COLUMN', @level2name = N'Package';


GO
PRINT N'Creating Extended Property [Fact].[Purchase].[Is Order Finalized].[Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'Description', @value = 'Is this purchase order now finalized?', @level0type = N'SCHEMA', @level0name = N'Fact', @level1type = N'TABLE', @level1name = N'Purchase', @level2type = N'COLUMN', @level2name = N'Is Order Finalized';


GO
PRINT N'Creating Extended Property [Fact].[Purchase].[Lineage Key].[Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'Description', @value = 'Lineage Key for the data load for this row', @level0type = N'SCHEMA', @level0name = N'Fact', @level1type = N'TABLE', @level1name = N'Purchase', @level2type = N'COLUMN', @level2name = N'Lineage Key';


GO
PRINT N'Creating Extended Property [Fact].[Sale].[Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'Description', @value = N'Sale fact table (invoiced sales to customers)', @level0type = N'SCHEMA', @level0name = N'Fact', @level1type = N'TABLE', @level1name = N'Sale';


GO
PRINT N'Creating Extended Property [Fact].[Sale].[Sale Key].[Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'Description', @value = 'DW key for a row in the Sale fact', @level0type = N'SCHEMA', @level0name = N'Fact', @level1type = N'TABLE', @level1name = N'Sale', @level2type = N'COLUMN', @level2name = N'Sale Key';


GO
PRINT N'Creating Extended Property [Fact].[Sale].[City Key].[Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'Description', @value = 'City for this invoice', @level0type = N'SCHEMA', @level0name = N'Fact', @level1type = N'TABLE', @level1name = N'Sale', @level2type = N'COLUMN', @level2name = N'City Key';


GO
PRINT N'Creating Extended Property [Fact].[Sale].[Customer Key].[Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'Description', @value = 'Customer for this invoice', @level0type = N'SCHEMA', @level0name = N'Fact', @level1type = N'TABLE', @level1name = N'Sale', @level2type = N'COLUMN', @level2name = N'Customer Key';


GO
PRINT N'Creating Extended Property [Fact].[Sale].[Bill To Customer Key].[Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'Description', @value = 'Bill To Customer for this invoice', @level0type = N'SCHEMA', @level0name = N'Fact', @level1type = N'TABLE', @level1name = N'Sale', @level2type = N'COLUMN', @level2name = N'Bill To Customer Key';


GO
PRINT N'Creating Extended Property [Fact].[Sale].[Stock Item Key].[Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'Description', @value = 'Stock item for this invoice', @level0type = N'SCHEMA', @level0name = N'Fact', @level1type = N'TABLE', @level1name = N'Sale', @level2type = N'COLUMN', @level2name = N'Stock Item Key';


GO
PRINT N'Creating Extended Property [Fact].[Sale].[Invoice Date Key].[Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'Description', @value = 'Invoice date for this invoice', @level0type = N'SCHEMA', @level0name = N'Fact', @level1type = N'TABLE', @level1name = N'Sale', @level2type = N'COLUMN', @level2name = N'Invoice Date Key';


GO
PRINT N'Creating Extended Property [Fact].[Sale].[Delivery Date Key].[Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'Description', @value = 'Date that these items were delivered', @level0type = N'SCHEMA', @level0name = N'Fact', @level1type = N'TABLE', @level1name = N'Sale', @level2type = N'COLUMN', @level2name = N'Delivery Date Key';


GO
PRINT N'Creating Extended Property [Fact].[Sale].[Salesperson Key].[Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'Description', @value = 'Salesperson for this invoice', @level0type = N'SCHEMA', @level0name = N'Fact', @level1type = N'TABLE', @level1name = N'Sale', @level2type = N'COLUMN', @level2name = N'Salesperson Key';


GO
PRINT N'Creating Extended Property [Fact].[Sale].[WWI Invoice ID].[Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'Description', @value = 'InvoiceID in source system', @level0type = N'SCHEMA', @level0name = N'Fact', @level1type = N'TABLE', @level1name = N'Sale', @level2type = N'COLUMN', @level2name = N'WWI Invoice ID';


GO
PRINT N'Creating Extended Property [Fact].[Sale].[Description].[Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'Description', @value = 'Description of the item supplied (Usually the stock item name but can be overridden)', @level0type = N'SCHEMA', @level0name = N'Fact', @level1type = N'TABLE', @level1name = N'Sale', @level2type = N'COLUMN', @level2name = N'Description';


GO
PRINT N'Creating Extended Property [Fact].[Sale].[Package].[Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'Description', @value = 'Type of package supplied', @level0type = N'SCHEMA', @level0name = N'Fact', @level1type = N'TABLE', @level1name = N'Sale', @level2type = N'COLUMN', @level2name = N'Package';


GO
PRINT N'Creating Extended Property [Fact].[Sale].[Quantity].[Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'Description', @value = 'Quantity supplied', @level0type = N'SCHEMA', @level0name = N'Fact', @level1type = N'TABLE', @level1name = N'Sale', @level2type = N'COLUMN', @level2name = N'Quantity';


GO
PRINT N'Creating Extended Property [Fact].[Sale].[Unit Price].[Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'Description', @value = 'Unit price charged', @level0type = N'SCHEMA', @level0name = N'Fact', @level1type = N'TABLE', @level1name = N'Sale', @level2type = N'COLUMN', @level2name = N'Unit Price';


GO
PRINT N'Creating Extended Property [Fact].[Sale].[Tax Rate].[Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'Description', @value = 'Tax rate applied', @level0type = N'SCHEMA', @level0name = N'Fact', @level1type = N'TABLE', @level1name = N'Sale', @level2type = N'COLUMN', @level2name = N'Tax Rate';


GO
PRINT N'Creating Extended Property [Fact].[Sale].[Total Excluding Tax].[Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'Description', @value = 'Total amount excluding tax', @level0type = N'SCHEMA', @level0name = N'Fact', @level1type = N'TABLE', @level1name = N'Sale', @level2type = N'COLUMN', @level2name = N'Total Excluding Tax';


GO
PRINT N'Creating Extended Property [Fact].[Sale].[Tax Amount].[Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'Description', @value = 'Total amount of tax', @level0type = N'SCHEMA', @level0name = N'Fact', @level1type = N'TABLE', @level1name = N'Sale', @level2type = N'COLUMN', @level2name = N'Tax Amount';


GO
PRINT N'Creating Extended Property [Fact].[Sale].[Profit].[Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'Description', @value = 'Total amount of profit', @level0type = N'SCHEMA', @level0name = N'Fact', @level1type = N'TABLE', @level1name = N'Sale', @level2type = N'COLUMN', @level2name = N'Profit';


GO
PRINT N'Creating Extended Property [Fact].[Sale].[Total Including Tax].[Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'Description', @value = 'Total amount including tax', @level0type = N'SCHEMA', @level0name = N'Fact', @level1type = N'TABLE', @level1name = N'Sale', @level2type = N'COLUMN', @level2name = N'Total Including Tax';


GO
PRINT N'Creating Extended Property [Fact].[Sale].[Total Dry Items].[Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'Description', @value = 'Total number of dry items', @level0type = N'SCHEMA', @level0name = N'Fact', @level1type = N'TABLE', @level1name = N'Sale', @level2type = N'COLUMN', @level2name = N'Total Dry Items';


GO
PRINT N'Creating Extended Property [Fact].[Sale].[Total Chiller Items].[Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'Description', @value = 'Total number of chiller items', @level0type = N'SCHEMA', @level0name = N'Fact', @level1type = N'TABLE', @level1name = N'Sale', @level2type = N'COLUMN', @level2name = N'Total Chiller Items';


GO
PRINT N'Creating Extended Property [Fact].[Sale].[Lineage Key].[Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'Description', @value = 'Lineage Key for the data load for this row', @level0type = N'SCHEMA', @level0name = N'Fact', @level1type = N'TABLE', @level1name = N'Sale', @level2type = N'COLUMN', @level2name = N'Lineage Key';


GO
PRINT N'Creating Extended Property [Fact].[Transaction].[Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'Description', @value = N'Transaction fact table (financial transactions involving customers and supppliers)', @level0type = N'SCHEMA', @level0name = N'Fact', @level1type = N'TABLE', @level1name = N'Transaction';


GO
PRINT N'Creating Extended Property [Fact].[Transaction].[Transaction Key].[Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'Description', @value = 'DW key for a row in the Transaction fact', @level0type = N'SCHEMA', @level0name = N'Fact', @level1type = N'TABLE', @level1name = N'Transaction', @level2type = N'COLUMN', @level2name = N'Transaction Key';


GO
PRINT N'Creating Extended Property [Fact].[Transaction].[Date Key].[Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'Description', @value = 'Transaction date', @level0type = N'SCHEMA', @level0name = N'Fact', @level1type = N'TABLE', @level1name = N'Transaction', @level2type = N'COLUMN', @level2name = N'Date Key';


GO
PRINT N'Creating Extended Property [Fact].[Transaction].[Customer Key].[Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'Description', @value = 'Customer (if applicable)', @level0type = N'SCHEMA', @level0name = N'Fact', @level1type = N'TABLE', @level1name = N'Transaction', @level2type = N'COLUMN', @level2name = N'Customer Key';


GO
PRINT N'Creating Extended Property [Fact].[Transaction].[Bill To Customer Key].[Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'Description', @value = 'Bill to customer (if applicable)', @level0type = N'SCHEMA', @level0name = N'Fact', @level1type = N'TABLE', @level1name = N'Transaction', @level2type = N'COLUMN', @level2name = N'Bill To Customer Key';


GO
PRINT N'Creating Extended Property [Fact].[Transaction].[Supplier Key].[Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'Description', @value = 'Supplier (if applicable)', @level0type = N'SCHEMA', @level0name = N'Fact', @level1type = N'TABLE', @level1name = N'Transaction', @level2type = N'COLUMN', @level2name = N'Supplier Key';


GO
PRINT N'Creating Extended Property [Fact].[Transaction].[Transaction Type Key].[Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'Description', @value = 'Type of transaction', @level0type = N'SCHEMA', @level0name = N'Fact', @level1type = N'TABLE', @level1name = N'Transaction', @level2type = N'COLUMN', @level2name = N'Transaction Type Key';


GO
PRINT N'Creating Extended Property [Fact].[Transaction].[Payment Method Key].[Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'Description', @value = 'Payment method (if applicable)', @level0type = N'SCHEMA', @level0name = N'Fact', @level1type = N'TABLE', @level1name = N'Transaction', @level2type = N'COLUMN', @level2name = N'Payment Method Key';


GO
PRINT N'Creating Extended Property [Fact].[Transaction].[WWI Customer Transaction ID].[Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'Description', @value = 'Customer transaction ID in source system', @level0type = N'SCHEMA', @level0name = N'Fact', @level1type = N'TABLE', @level1name = N'Transaction', @level2type = N'COLUMN', @level2name = N'WWI Customer Transaction ID';


GO
PRINT N'Creating Extended Property [Fact].[Transaction].[WWI Supplier Transaction ID].[Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'Description', @value = 'Supplier transaction ID in source system', @level0type = N'SCHEMA', @level0name = N'Fact', @level1type = N'TABLE', @level1name = N'Transaction', @level2type = N'COLUMN', @level2name = N'WWI Supplier Transaction ID';


GO
PRINT N'Creating Extended Property [Fact].[Transaction].[WWI Invoice ID].[Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'Description', @value = 'Invoice ID in source system', @level0type = N'SCHEMA', @level0name = N'Fact', @level1type = N'TABLE', @level1name = N'Transaction', @level2type = N'COLUMN', @level2name = N'WWI Invoice ID';


GO
PRINT N'Creating Extended Property [Fact].[Transaction].[WWI Purchase Order ID].[Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'Description', @value = 'Purchase order ID in source system', @level0type = N'SCHEMA', @level0name = N'Fact', @level1type = N'TABLE', @level1name = N'Transaction', @level2type = N'COLUMN', @level2name = N'WWI Purchase Order ID';


GO
PRINT N'Creating Extended Property [Fact].[Transaction].[Supplier Invoice Number].[Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'Description', @value = 'Supplier invoice number (if applicable)', @level0type = N'SCHEMA', @level0name = N'Fact', @level1type = N'TABLE', @level1name = N'Transaction', @level2type = N'COLUMN', @level2name = N'Supplier Invoice Number';


GO
PRINT N'Creating Extended Property [Fact].[Transaction].[Total Excluding Tax].[Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'Description', @value = 'Total amount excluding tax', @level0type = N'SCHEMA', @level0name = N'Fact', @level1type = N'TABLE', @level1name = N'Transaction', @level2type = N'COLUMN', @level2name = N'Total Excluding Tax';


GO
PRINT N'Creating Extended Property [Fact].[Transaction].[Tax Amount].[Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'Description', @value = 'Total amount of tax', @level0type = N'SCHEMA', @level0name = N'Fact', @level1type = N'TABLE', @level1name = N'Transaction', @level2type = N'COLUMN', @level2name = N'Tax Amount';


GO
PRINT N'Creating Extended Property [Fact].[Transaction].[Total Including Tax].[Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'Description', @value = 'Total amount including tax', @level0type = N'SCHEMA', @level0name = N'Fact', @level1type = N'TABLE', @level1name = N'Transaction', @level2type = N'COLUMN', @level2name = N'Total Including Tax';


GO
PRINT N'Creating Extended Property [Fact].[Transaction].[Outstanding Balance].[Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'Description', @value = 'Amount still outstanding for this transaction', @level0type = N'SCHEMA', @level0name = N'Fact', @level1type = N'TABLE', @level1name = N'Transaction', @level2type = N'COLUMN', @level2name = N'Outstanding Balance';


GO
PRINT N'Creating Extended Property [Fact].[Transaction].[Is Finalized].[Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'Description', @value = 'Has this transaction been finalized?', @level0type = N'SCHEMA', @level0name = N'Fact', @level1type = N'TABLE', @level1name = N'Transaction', @level2type = N'COLUMN', @level2name = N'Is Finalized';


GO
PRINT N'Creating Extended Property [Fact].[Transaction].[Lineage Key].[Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'Description', @value = 'Lineage Key for the data load for this row', @level0type = N'SCHEMA', @level0name = N'Fact', @level1type = N'TABLE', @level1name = N'Transaction', @level2type = N'COLUMN', @level2name = N'Lineage Key';


GO
PRINT N'Refreshing Procedure [Application].[Configuration_ReseedETL]...';


GO
EXECUTE sp_refreshsqlmodule N'[Application].[Configuration_ReseedETL]';


GO
PRINT N'Refreshing Procedure [Integration].[MigrateStagedMovementData]...';


GO
EXECUTE sp_refreshsqlmodule N'[Integration].[MigrateStagedMovementData]';


GO
PRINT N'Refreshing Procedure [Integration].[MigrateStagedOrderData]...';


GO
EXECUTE sp_refreshsqlmodule N'[Integration].[MigrateStagedOrderData]';


GO
PRINT N'Refreshing Procedure [Integration].[MigrateStagedPurchaseData]...';


GO
EXECUTE sp_refreshsqlmodule N'[Integration].[MigrateStagedPurchaseData]';


GO
PRINT N'Refreshing Procedure [Application].[Configuration_PopulateLargeSaleTable]...';


GO
EXECUTE sp_refreshsqlmodule N'[Application].[Configuration_PopulateLargeSaleTable]';


GO
PRINT N'Refreshing Procedure [Integration].[MigrateStagedSaleData]...';


GO
EXECUTE sp_refreshsqlmodule N'[Integration].[MigrateStagedSaleData]';


GO
PRINT N'Refreshing Procedure [Integration].[MigrateStagedTransactionData]...';


GO
EXECUTE sp_refreshsqlmodule N'[Integration].[MigrateStagedTransactionData]';


GO
PRINT N'Checking existing data against newly created constraints';


GO
USE [$(DatabaseName)];


GO
ALTER TABLE [Fact].[Movement] WITH CHECK CHECK CONSTRAINT [FK_Fact_Movement_Date_Key_Dimension_Date];

ALTER TABLE [Fact].[Movement] WITH CHECK CHECK CONSTRAINT [FK_Fact_Movement_Stock_Item_Key_Dimension_Stock Item];

ALTER TABLE [Fact].[Movement] WITH CHECK CHECK CONSTRAINT [FK_Fact_Movement_Customer_Key_Dimension_Customer];

ALTER TABLE [Fact].[Movement] WITH CHECK CHECK CONSTRAINT [FK_Fact_Movement_Supplier_Key_Dimension_Supplier];

ALTER TABLE [Fact].[Movement] WITH CHECK CHECK CONSTRAINT [FK_Fact_Movement_Transaction_Type_Key_Dimension_Transaction Type];

ALTER TABLE [Fact].[Order] WITH CHECK CHECK CONSTRAINT [FK_Fact_Order_City_Key_Dimension_City];

ALTER TABLE [Fact].[Order] WITH CHECK CHECK CONSTRAINT [FK_Fact_Order_Customer_Key_Dimension_Customer];

ALTER TABLE [Fact].[Order] WITH CHECK CHECK CONSTRAINT [FK_Fact_Order_Stock_Item_Key_Dimension_Stock Item];

ALTER TABLE [Fact].[Order] WITH CHECK CHECK CONSTRAINT [FK_Fact_Order_Order_Date_Key_Dimension_Date];

ALTER TABLE [Fact].[Order] WITH CHECK CHECK CONSTRAINT [FK_Fact_Order_Picked_Date_Key_Dimension_Date];

ALTER TABLE [Fact].[Order] WITH CHECK CHECK CONSTRAINT [FK_Fact_Order_Salesperson_Key_Dimension_Employee];

ALTER TABLE [Fact].[Order] WITH CHECK CHECK CONSTRAINT [FK_Fact_Order_Picker_Key_Dimension_Employee];

ALTER TABLE [Fact].[Purchase] WITH CHECK CHECK CONSTRAINT [FK_Fact_Purchase_Date_Key_Dimension_Date];

ALTER TABLE [Fact].[Purchase] WITH CHECK CHECK CONSTRAINT [FK_Fact_Purchase_Supplier_Key_Dimension_Supplier];

ALTER TABLE [Fact].[Purchase] WITH CHECK CHECK CONSTRAINT [FK_Fact_Purchase_Stock_Item_Key_Dimension_Stock Item];

ALTER TABLE [Fact].[Sale] WITH CHECK CHECK CONSTRAINT [FK_Fact_Sale_City_Key_Dimension_City];

ALTER TABLE [Fact].[Sale] WITH CHECK CHECK CONSTRAINT [FK_Fact_Sale_Customer_Key_Dimension_Customer];

ALTER TABLE [Fact].[Sale] WITH CHECK CHECK CONSTRAINT [FK_Fact_Sale_Bill_To_Customer_Key_Dimension_Customer];

ALTER TABLE [Fact].[Sale] WITH CHECK CHECK CONSTRAINT [FK_Fact_Sale_Stock_Item_Key_Dimension_Stock Item];

ALTER TABLE [Fact].[Sale] WITH CHECK CHECK CONSTRAINT [FK_Fact_Sale_Invoice_Date_Key_Dimension_Date];

ALTER TABLE [Fact].[Sale] WITH CHECK CHECK CONSTRAINT [FK_Fact_Sale_Delivery_Date_Key_Dimension_Date];

ALTER TABLE [Fact].[Sale] WITH CHECK CHECK CONSTRAINT [FK_Fact_Sale_Salesperson_Key_Dimension_Employee];

ALTER TABLE [Fact].[Transaction] WITH CHECK CHECK CONSTRAINT [FK_Fact_Transaction_Date_Key_Dimension_Date];

ALTER TABLE [Fact].[Transaction] WITH CHECK CHECK CONSTRAINT [FK_Fact_Transaction_Customer_Key_Dimension_Customer];

ALTER TABLE [Fact].[Transaction] WITH CHECK CHECK CONSTRAINT [FK_Fact_Transaction_Bill_To_Customer_Key_Dimension_Customer];

ALTER TABLE [Fact].[Transaction] WITH CHECK CHECK CONSTRAINT [FK_Fact_Transaction_Supplier_Key_Dimension_Supplier];

ALTER TABLE [Fact].[Transaction] WITH CHECK CHECK CONSTRAINT [FK_Fact_Transaction_Transaction_Type_Key_Dimension_Transaction Type];

ALTER TABLE [Fact].[Transaction] WITH CHECK CHECK CONSTRAINT [FK_Fact_Transaction_Payment_Method_Key_Dimension_Payment Method];


GO
PRINT N'Update complete.';


GO
